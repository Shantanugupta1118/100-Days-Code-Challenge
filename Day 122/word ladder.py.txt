from collections import deque

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList:
            return 0
        
        wordList_combinations = dict()
        for word in wordList:
            if word not in [beginWord]:
                combinations = self.getCombinations(word)
                for combination in combinations:
                    if combination not in wordList_combinations.keys():
                        wordList_combinations[combination] = []
                    wordList_combinations[combination].append(word)
        
        visited = set()
        queue = deque([(beginWord, 1)])
        
        while queue:
            currentWord, level = queue.popleft()
            if currentWord not in visited:
                visited.add(currentWord)
                for combination in self.getCombinations(currentWord):
                    if combination in wordList_combinations:
                        for word in wordList_combinations[combination]:
                            if word == endWord:
                                return level + 1
                            if word not in visited:
                                queue.append((word, level + 1))
        return 0
    
    def getCombinations(self, word):
            combinations = []
            for i, char in enumerate(word):
                combinations.append(word[:i] + '*' + word[i+1:])
            return combinations